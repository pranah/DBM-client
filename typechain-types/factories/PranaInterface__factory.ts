/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PranaInterface,
  PranaInterfaceInterface,
} from "../PranaInterface";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenid",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenRecipient",
        type: "address",
      },
    ],
    name: "buyToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenid",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenRecipient",
        type: "address",
      },
    ],
    name: "buyTokenAsTheSpecialBuyer",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ff8061001f6000396000f3fe60806040526004361060265760003560e01c80635437c7fa14602b5780639134709e146076575b600080fd5b607460048036036040811015603f57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505060c1565b005b60bf60048036036040811015608a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505060c5565b005b5050565b505056fea2646970667358221220c476661ce9c954eb000eb486cd343bedf0267b893429a9474243c7345ebf3f1364736f6c63430006020033";

type PranaInterfaceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PranaInterfaceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PranaInterface__factory extends ContractFactory {
  constructor(...args: PranaInterfaceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "PranaInterface";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PranaInterface> {
    return super.deploy(overrides || {}) as Promise<PranaInterface>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PranaInterface {
    return super.attach(address) as PranaInterface;
  }
  connect(signer: Signer): PranaInterface__factory {
    return super.connect(signer) as PranaInterface__factory;
  }
  static readonly contractName: "PranaInterface";
  public readonly contractName: "PranaInterface";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PranaInterfaceInterface {
    return new utils.Interface(_abi) as PranaInterfaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PranaInterface {
    return new Contract(address, _abi, signerOrProvider) as PranaInterface;
  }
}
