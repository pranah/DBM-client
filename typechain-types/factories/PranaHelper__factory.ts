/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PranaHelper, PranaHelperInterface } from "../PranaHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_pranaAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buyTokenFromPrana",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pranaAddress",
        type: "address",
      },
    ],
    name: "setPranaAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103a13803806103a18339818101604052602081101561003357600080fd5b8101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506102cc806100d56000396000f3fe6080604052600436106100295760003560e01c8063a9fbf5c41461002e578063f60d01041461007f575b600080fd5b34801561003a57600080fd5b5061007d6004803603602081101561005157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100ad565b005b6100ab6004803603602081101561009557600080fd5b8101908080359060200190929190505050610196565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610152576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806102626035913960400191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16639134709e3484336040518463ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001925050506000604051808303818588803b15801561024457600080fd5b505af1158015610258573d6000803e3d6000fd5b5050505050505056fe596f7520617265206e6f742074686520636f6e7472616374206f776e657220746f2063616c6c20746869732066756e6374696f6e21a26469706673582212203879ee6661018e500f4e27cc7957bb40b754f212662505e41388dff61b5fea1f64736f6c63430006020033";

type PranaHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PranaHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PranaHelper__factory extends ContractFactory {
  constructor(...args: PranaHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "PranaHelper";
  }

  deploy(
    _pranaAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PranaHelper> {
    return super.deploy(_pranaAddress, overrides || {}) as Promise<PranaHelper>;
  }
  getDeployTransaction(
    _pranaAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_pranaAddress, overrides || {});
  }
  attach(address: string): PranaHelper {
    return super.attach(address) as PranaHelper;
  }
  connect(signer: Signer): PranaHelper__factory {
    return super.connect(signer) as PranaHelper__factory;
  }
  static readonly contractName: "PranaHelper";
  public readonly contractName: "PranaHelper";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PranaHelperInterface {
    return new utils.Interface(_abi) as PranaHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PranaHelper {
    return new Contract(address, _abi, signerOrProvider) as PranaHelper;
  }
}
