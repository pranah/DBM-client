/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace NFTMarket {
  export type MarketItemStruct = {
    itemId: BigNumberish;
    nftContract: string;
    tokenId: BigNumberish;
    seller: string;
    owner: string;
    price: BigNumberish;
    sold: boolean;
  };

  export type MarketItemStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    itemId: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    sold: boolean;
  };
}

export interface NFTMarketInterface extends utils.Interface {
  contractName: "NFTMarket";
  functions: {
    "createMarketItem(address,uint256,uint256)": FunctionFragment;
    "createMarketSale(address,uint256)": FunctionFragment;
    "fetchItemsCreated()": FunctionFragment;
    "fetchMarketItems()": FunctionFragment;
    "fetchMyNFTs()": FunctionFragment;
    "getListingPrice()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createMarketItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchItemsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListingPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createMarketItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchItemsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingPrice",
    data: BytesLike
  ): Result;

  events: {
    "MarketItemCreated(uint256,address,uint256,address,address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketItemCreated"): EventFragment;
}

export type MarketItemCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, BigNumber, boolean],
  {
    itemId: BigNumber;
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    sold: boolean;
  }
>;

export type MarketItemCreatedEventFilter =
  TypedEventFilter<MarketItemCreatedEvent>;

export interface NFTMarket extends BaseContract {
  contractName: "NFTMarket";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchItemsCreated(
      overrides?: CallOverrides
    ): Promise<[NFTMarket.MarketItemStructOutput[]]>;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<[NFTMarket.MarketItemStructOutput[]]>;

    fetchMyNFTs(
      overrides?: CallOverrides
    ): Promise<[NFTMarket.MarketItemStructOutput[]]>;

    getListingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  createMarketItem(
    nftContract: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createMarketSale(
    nftContract: string,
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchItemsCreated(
    overrides?: CallOverrides
  ): Promise<NFTMarket.MarketItemStructOutput[]>;

  fetchMarketItems(
    overrides?: CallOverrides
  ): Promise<NFTMarket.MarketItemStructOutput[]>;

  fetchMyNFTs(
    overrides?: CallOverrides
  ): Promise<NFTMarket.MarketItemStructOutput[]>;

  getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchItemsCreated(
      overrides?: CallOverrides
    ): Promise<NFTMarket.MarketItemStructOutput[]>;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<NFTMarket.MarketItemStructOutput[]>;

    fetchMyNFTs(
      overrides?: CallOverrides
    ): Promise<NFTMarket.MarketItemStructOutput[]>;

    getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "MarketItemCreated(uint256,address,uint256,address,address,uint256,bool)"(
      itemId?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): MarketItemCreatedEventFilter;
    MarketItemCreated(
      itemId?: BigNumberish | null,
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: null,
      owner?: null,
      price?: null,
      sold?: null
    ): MarketItemCreatedEventFilter;
  };

  estimateGas: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchItemsCreated(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMyNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createMarketItem(
      nftContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createMarketSale(
      nftContract: string,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchItemsCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchMarketItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchMyNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getListingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
